{
  "info": {
    "_postman_id": "b20168b9-1248-4be0-a031-54b21dca083f",
    "name": "EWM-Marks",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "26681728"
  },
  "item": [
    {
      "name": "Users",
      "item": [
        {
          "name": "AddUser1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test user 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test user 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('email');\r",
                  "});\r",
                  "pm.test(\"Test user 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"ivan.petrov@practicummail.ru\",\r\n  \"name\": \"Иван Петров\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/admin/users",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddUser2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test user 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test user 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('email');\r",
                  "});\r",
                  "pm.test(\"Test user 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"pert.petrov@practicummail.ru\",\r\n  \"name\": \"Петр Петров\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/admin/users",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddUser3",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test user 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test user 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('email');\r",
                  "});\r",
                  "pm.test(\"Test user 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"alex.petrov@practicummail.ru\",\r\n  \"name\": \"Алексей Петров\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/admin/users",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddUser4",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test user 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);\r",
                  "});\r",
                  "pm.test(\"Test user 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('email');\r",
                  "});\r",
                  "pm.test(\"Test user 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"dima.petrov@practicummail.ru\",\r\n  \"name\": \"Дмитрий Петров\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/admin/users",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Categories",
      "item": [
        {
          "name": "AddCategory1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has category create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test category'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test category 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"Концерты\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/admin/categories",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "admin",
                "categories"
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddCategory2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has category create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test category 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test category 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"Выступление\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/admin/categories",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "admin",
                "categories"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Events",
      "item": [
        {
          "name": "AddEvent1byUser1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "});\r",
                  "pm.test(\"Test event 'annotation' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('annotation');\r",
                  "});\r",
                  "pm.test(\"Test event 'initiator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('initiator');\r",
                  "});\r",
                  "pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "pm.test(\"Test event 'category' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('category');\r",
                  "});\r",
                  "pm.test(\"Test event 'createdOn' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('createdOn');\r",
                  "});\r",
                  "pm.test(\"Test event 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "});\r",
                  "pm.test(\"Test event 'location' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('location');\r",
                  "});\r",
                  "pm.test(\"Test event 'paid' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('paid');\r",
                  "});\r",
                  "pm.test(\"Test event 'participantLimit' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('participantLimit');\r",
                  "});\r",
                  "pm.test(\"Test event 'requestModeration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('requestModeration');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "});\r",
                  "pm.test(\"Test event 'views' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('views');\r",
                  "});\r",
                  "pm.test(\"Test event 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.not.have.property('mark');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\r\n  \"category\": 2,\r\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2024-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": true,\r\n  \"title\": \"Сплав на байдарках\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/users/1/events",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "1",
                "events"
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddEvent2byUser2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "});\r",
                  "pm.test(\"Test event 'annotation' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('annotation');\r",
                  "});\r",
                  "pm.test(\"Test event 'initiator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('initiator');\r",
                  "});\r",
                  "pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "pm.test(\"Test event 'category' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('category');\r",
                  "});\r",
                  "pm.test(\"Test event 'createdOn' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('createdOn');\r",
                  "});\r",
                  "pm.test(\"Test event 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "});\r",
                  "pm.test(\"Test event 'location' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('location');\r",
                  "});\r",
                  "pm.test(\"Test event 'paid' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('paid');\r",
                  "});\r",
                  "pm.test(\"Test event 'participantLimit' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('participantLimit');\r",
                  "});\r",
                  "pm.test(\"Test event 'requestModeration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('requestModeration');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "});\r",
                  "pm.test(\"Test event 'views' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('views');\r",
                  "});\r",
                  "pm.test(\"Test event 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.not.have.property('mark');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Сплав на лодках похож на полет.\",\r\n  \"category\": 1,\r\n  \"description\": \"Сплав на лодках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2024-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 5,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Сплав на лодках\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/users/2/events",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "events"
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddEvent3byUser3",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "});\r",
                  "pm.test(\"Test event 'annotation' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('annotation');\r",
                  "});\r",
                  "pm.test(\"Test event 'initiator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('initiator');\r",
                  "});\r",
                  "pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "pm.test(\"Test event 'category' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('category');\r",
                  "});\r",
                  "pm.test(\"Test event 'createdOn' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('createdOn');\r",
                  "});\r",
                  "pm.test(\"Test event 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "});\r",
                  "pm.test(\"Test event 'location' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('location');\r",
                  "});\r",
                  "pm.test(\"Test event 'paid' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('paid');\r",
                  "});\r",
                  "pm.test(\"Test event 'participantLimit' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('participantLimit');\r",
                  "});\r",
                  "pm.test(\"Test event 'requestModeration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('requestModeration');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "});\r",
                  "pm.test(\"Test event 'views' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('views');\r",
                  "});\r",
                  "pm.test(\"Test event 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.not.have.property('mark');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Сплав на плотах похож на полет.\",\r\n  \"category\": 1,\r\n  \"description\": \"Сплав на плотах похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2024-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 5,\r\n  \"requestModeration\": true,\r\n  \"title\": \"Сплав на плотах\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/users/3/events",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "3",
                "events"
              ]
            }
          },
          "response": []
        },
        {
          "name": "PublishEvent1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "});\r",
                  "pm.test(\"Test event 'annotation' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('annotation');\r",
                  "});\r",
                  "pm.test(\"Test event 'initiator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('initiator');\r",
                  "});\r",
                  "pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "pm.test(\"Test event 'category' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('category');\r",
                  "});\r",
                  "pm.test(\"Test event 'createdOn' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('createdOn');\r",
                  "});\r",
                  "pm.test(\"Test event 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "});\r",
                  "pm.test(\"Test event 'location' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('location');\r",
                  "});\r",
                  "pm.test(\"Test event 'paid' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('paid');\r",
                  "});\r",
                  "pm.test(\"Test event 'participantLimit' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('participantLimit');\r",
                  "});\r",
                  "pm.test(\"Test event 'requestModeration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('requestModeration');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "    pm.expect(jsonData.state).to.eql('PUBLISHED');\r",
                  "});\r",
                  "pm.test(\"Test event 'views' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('views');\r",
                  "});\r",
                  "pm.test(\"Test event 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.not.have.property('mark');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/admin/events/1",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "admin",
                "events",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "PublishEvent2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "});\r",
                  "pm.test(\"Test event 'annotation' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('annotation');\r",
                  "});\r",
                  "pm.test(\"Test event 'initiator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('initiator');\r",
                  "});\r",
                  "pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "pm.test(\"Test event 'category' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('category');\r",
                  "});\r",
                  "pm.test(\"Test event 'createdOn' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('createdOn');\r",
                  "});\r",
                  "pm.test(\"Test event 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "});\r",
                  "pm.test(\"Test event 'location' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('location');\r",
                  "});\r",
                  "pm.test(\"Test event 'paid' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('paid');\r",
                  "});\r",
                  "pm.test(\"Test event 'participantLimit' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('participantLimit');\r",
                  "});\r",
                  "pm.test(\"Test event 'requestModeration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('requestModeration');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "    pm.expect(jsonData.state).to.eql('PUBLISHED');\r",
                  "});\r",
                  "pm.test(\"Test event 'views' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('views');\r",
                  "});\r",
                  "pm.test(\"Test event 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.not.have.property('mark');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/admin/events/2",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "admin",
                "events",
                "2"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Requests",
      "item": [
        {
          "name": "RequestUser2Event1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has request create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test request 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test request 'event' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('event');\r",
                  "});\r",
                  "pm.test(\"Test request 'created' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('created');\r",
                  "});\r",
                  "pm.test(\"Test request 'requester' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('requester');\r",
                  "});\r",
                  "pm.test(\"Test request 'status' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('status');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/2/requests?eventId=1",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "requests"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "RequestUser3Event1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has request create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test request 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test request 'event' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('event');\r",
                  "});\r",
                  "pm.test(\"Test request 'created' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('created');\r",
                  "});\r",
                  "pm.test(\"Test request 'requester' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('requester');\r",
                  "});\r",
                  "pm.test(\"Test request 'status' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('status');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/3/requests?eventId=1",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "3",
                "requests"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "RequestUser4Event2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has request create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test request 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test request 'event' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('event');\r",
                  "});\r",
                  "pm.test(\"Test request 'created' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('created');\r",
                  "});\r",
                  "pm.test(\"Test request 'requester' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('requester');\r",
                  "});\r",
                  "pm.test(\"Test request 'status' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('status');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/4/requests?eventId=2",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "4",
                "requests"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "2"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "RequestUser1Event2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has request create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test request 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);\r",
                  "});\r",
                  "pm.test(\"Test request 'event' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('event');\r",
                  "});\r",
                  "pm.test(\"Test request 'created' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('created');\r",
                  "});\r",
                  "pm.test(\"Test request 'requester' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('requester');\r",
                  "});\r",
                  "pm.test(\"Test request 'status' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('status');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/1/requests?eventId=2",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "1",
                "requests"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "2"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AproveRequests1-2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has requestAprove create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test requestAprove 'confirmedRequests' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "pm.test(\"Test requestAprove 'rejectedRequests' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('rejectedRequests');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"requestIds\": [\r\n    1,\r\n    2\r\n  ],\r\n  \"status\": \"CONFIRMED\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/users/1/events/1/requests",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "1",
                "events",
                "1",
                "requests"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Marks",
      "item": [
        {
          "name": "AddMarkUser2Event1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has mark create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test mark 'userId' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('userId');\r",
                  "    pm.expect(jsonData.userId, '\"userId\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test mark 'eventId' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventId');\r",
                  "    pm.expect(jsonData.eventId, '\"eventId\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test mark 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mark');\r",
                  "    pm.expect(jsonData.mark, '\"mark\" must be 5').to.eql(5);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/2/events/1/like?mark=5",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "events",
                "1",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddErrorMarkUser2Event1 Duplicate",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 409\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([409]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/2/events/1/like?mark=5",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "events",
                "1",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddErrorMarkUser99Event1 WrongUser",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/99/events/1/like?mark=5",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "99",
                "events",
                "1",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddErrorMarkUser2Event99 WrongEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/2/events/99/like?mark=5",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "events",
                "99",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddErrorMarkUser2Event1 Mark<0",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([400]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/2/events/1/like?mark=-5",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "events",
                "1",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "-5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddErrorMarkUser2Event1 Mark=0",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([400]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/2/events/1/like?mark=0",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "events",
                "1",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "0"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddErrorMarkUser2Event1 Mark>5",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([400]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/2/events/1/like?mark=6",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "events",
                "1",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "6"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddErrorMarkUser2Event1 MarkByAuthor",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 409\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([409]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/1/events/1/like?mark=5",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "1",
                "events",
                "1",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddErrorMarkUser4Event1 MarkByUserWithoutRequest",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 409\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([409]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/4/events/1/like?mark=5",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "4",
                "events",
                "1",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddErrorMarkUser2Event3 MarkEventNotPublished",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 409\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([409]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/2/events/3/like?mark=5",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "events",
                "3",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddMarkUser3Event1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has mark create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test mark 'userId' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('userId');\r",
                  "    pm.expect(jsonData.userId, '\"userId\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test mark 'eventId' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventId');\r",
                  "    pm.expect(jsonData.eventId, '\"eventId\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test mark 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mark');\r",
                  "    pm.expect(jsonData.mark, '\"mark\" must be 1').to.eql(1);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/3/events/1/like?mark=1",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "3",
                "events",
                "1",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetEvent1WithMark",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test event 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mark');\r",
                  "    pm.expect(jsonData.mark, '\"mark\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test event 'UserMark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.initiator).to.have.property('mark');\r",
                  "    pm.expect(jsonData.initiator.mark, '\"mark\" must be 3').to.eql(3);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/events/1",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "events",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddMarkUser4Event2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has mark create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test mark 'userId' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('userId');\r",
                  "    pm.expect(jsonData.userId, '\"userId\" must be 4').to.eql(4);\r",
                  "});\r",
                  "pm.test(\"Test mark 'eventId' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventId');\r",
                  "    pm.expect(jsonData.eventId, '\"eventId\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test mark 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mark');\r",
                  "    pm.expect(jsonData.mark, '\"mark\" must be 5').to.eql(5);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/4/events/2/like?mark=5",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "4",
                "events",
                "2",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddMarkUser1Event2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has mark create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test mark 'userId' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('userId');\r",
                  "    pm.expect(jsonData.userId, '\"userId\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test mark 'eventId' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventId');\r",
                  "    pm.expect(jsonData.eventId, '\"eventId\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test mark 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mark');\r",
                  "    pm.expect(jsonData.mark, '\"mark\" must be 5').to.eql(5);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/1/events/2/like?mark=5",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "1",
                "events",
                "2",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetPublicEventsWithMarksByViews",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test getEventsWithMark response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('mark');\r",
                  "    pm.expect(jsonData[0].mark, '\"mark\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'UserMark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0].initiator).to.have.property('mark');\r",
                  "    pm.expect(jsonData[0].initiator.mark, '\"mark\" must be 3').to.eql(3);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test event[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('mark');\r",
                  "    pm.expect(jsonData[1].mark, '\"mark\" must be 5').to.eql(5);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'UserMark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1].initiator).to.have.property('mark');\r",
                  "    pm.expect(jsonData[1].initiator.mark, '\"mark\" must be 5').to.eql(5);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/events?onlyAvailable=false&sort=VIEWS&from=0&size=10",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "events"
              ],
              "query": [
                {
                  "key": "onlyAvailable",
                  "value": "false"
                },
                {
                  "key": "sort",
                  "value": "VIEWS"
                },
                {
                  "key": "from",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetPublicEventsWithMarksByMarks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test getEventsWithMark response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Test event[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('mark');\r",
                  "    pm.expect(jsonData[0].mark, '\"mark\" must be 5').to.eql(5);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'UserMark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0].initiator).to.have.property('mark');\r",
                  "    pm.expect(jsonData[0].initiator.mark, '\"mark\" must be 5').to.eql(5);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test event[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('mark');\r",
                  "    pm.expect(jsonData[1].mark, '\"mark\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'UserMark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1].initiator).to.have.property('mark');\r",
                  "    pm.expect(jsonData[1].initiator.mark, '\"mark\" must be 3').to.eql(3);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/events?onlyAvailable=false&from=0&size=10",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "events"
              ],
              "query": [
                {
                  "key": "onlyAvailable",
                  "value": "false"
                },
                {
                  "key": "from",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetAdminEventsWithMarks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test getEventsWithMark response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('mark');\r",
                  "    pm.expect(jsonData[0].mark, '\"mark\" must be 5').to.eql(5);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'UserMark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0].initiator).to.have.property('mark');\r",
                  "    pm.expect(jsonData[0].initiator.mark, '\"mark\" must be 5').to.eql(5);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test event[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('mark');\r",
                  "    pm.expect(jsonData[1].mark, '\"mark\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'UserMark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1].initiator).to.have.property('mark');\r",
                  "    pm.expect(jsonData[1].initiator.mark, '\"mark\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('id');\r",
                  "    pm.expect(jsonData[2].id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.not.have.property('mark');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'UserMark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2].initiator).to.not.have.property('mark');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/admin/events?from=0&size=10",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "admin",
                "events"
              ],
              "query": [
                {
                  "key": "from",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "DeleteMarkUser2Event1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/2/events/1/like",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "events",
                "1",
                "like"
              ]
            }
          },
          "response": []
        },
        {
          "name": "DeleteErrorMarkUser4Event1 NoMarkFromUser",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/4/events/1/like",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "4",
                "events",
                "1",
                "like"
              ]
            }
          },
          "response": []
        },
        {
          "name": "DeleteErrorMarkUser99Event1 WrongUser",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/99/events/1/like",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "99",
                "events",
                "1",
                "like"
              ]
            }
          },
          "response": []
        },
        {
          "name": "DeleteErrorMarkUser2Event99 WrongEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/2/events/99/like",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "events",
                "99",
                "like"
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetEvent1WithMark AfterDelete",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test event 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mark');\r",
                  "    pm.expect(jsonData.mark, '\"mark\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test event 'UserMark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.initiator).to.have.property('mark');\r",
                  "    pm.expect(jsonData.initiator.mark, '\"mark\" must be 1').to.eql(1);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/events/1",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "events",
                "1"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ]
}