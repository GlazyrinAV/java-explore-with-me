{
  "info": {
    "_postman_id": "b20168b9-1248-4be0-a031-54b21dca083f",
    "name": "EWM-Marks",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "26681728"
  },
  "item": [
    {
      "name": "Events",
      "item": [
        {
          "name": "AddEvent112byUser1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "});\r",
                  "pm.test(\"Test event 'annotation' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('annotation');\r",
                  "});\r",
                  "pm.test(\"Test event 'initiator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('initiator');\r",
                  "});\r",
                  "pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "pm.test(\"Test event 'category' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('category');\r",
                  "});\r",
                  "pm.test(\"Test event 'createdOn' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('createdOn');\r",
                  "});\r",
                  "pm.test(\"Test event 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "});\r",
                  "pm.test(\"Test event 'location' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('location');\r",
                  "});\r",
                  "pm.test(\"Test event 'paid' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('paid');\r",
                  "});\r",
                  "pm.test(\"Test event 'participantLimit' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('participantLimit');\r",
                  "});\r",
                  "pm.test(\"Test event 'requestModeration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('requestModeration');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "});\r",
                  "pm.test(\"Test event 'views' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('views');\r",
                  "});\r",
                  "pm.test(\"Test event 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.not.have.property('mark');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"на лодках похож на полет.\",\r\n  \"category\": 1,\r\n  \"description\": \"Сплав на лодках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2025-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 5,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Сплав на лодках\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/users/1/events",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "1",
                "events"
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddEvent111byUser1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "});\r",
                  "pm.test(\"Test event 'annotation' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('annotation');\r",
                  "});\r",
                  "pm.test(\"Test event 'initiator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('initiator');\r",
                  "});\r",
                  "pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "pm.test(\"Test event 'category' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('category');\r",
                  "});\r",
                  "pm.test(\"Test event 'createdOn' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('createdOn');\r",
                  "});\r",
                  "pm.test(\"Test event 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "});\r",
                  "pm.test(\"Test event 'location' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('location');\r",
                  "});\r",
                  "pm.test(\"Test event 'paid' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('paid');\r",
                  "});\r",
                  "pm.test(\"Test event 'participantLimit' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('participantLimit');\r",
                  "});\r",
                  "pm.test(\"Test event 'requestModeration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('requestModeration');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "});\r",
                  "pm.test(\"Test event 'views' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('views');\r",
                  "});\r",
                  "pm.test(\"Test event 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.not.have.property('mark');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\r\n  \"category\": 2,\r\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2025-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Сплав на байдарках\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/users/1/events",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "1",
                "events"
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddEvent117byUser1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "});\r",
                  "pm.test(\"Test event 'annotation' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('annotation');\r",
                  "});\r",
                  "pm.test(\"Test event 'initiator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('initiator');\r",
                  "});\r",
                  "pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "pm.test(\"Test event 'category' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('category');\r",
                  "});\r",
                  "pm.test(\"Test event 'createdOn' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('createdOn');\r",
                  "});\r",
                  "pm.test(\"Test event 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "});\r",
                  "pm.test(\"Test event 'location' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('location');\r",
                  "});\r",
                  "pm.test(\"Test event 'paid' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('paid');\r",
                  "});\r",
                  "pm.test(\"Test event 'participantLimit' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('participantLimit');\r",
                  "});\r",
                  "pm.test(\"Test event 'requestModeration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('requestModeration');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "});\r",
                  "pm.test(\"Test event 'views' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('views');\r",
                  "});\r",
                  "pm.test(\"Test event 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.not.have.property('mark');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Сплав на байдарках похож на .\",\r\n  \"category\": 2,\r\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2025-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Сплав на байдарках\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/users/1/events",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "1",
                "events"
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddEvent118byUser1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "});\r",
                  "pm.test(\"Test event 'annotation' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('annotation');\r",
                  "});\r",
                  "pm.test(\"Test event 'initiator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('initiator');\r",
                  "});\r",
                  "pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "pm.test(\"Test event 'category' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('category');\r",
                  "});\r",
                  "pm.test(\"Test event 'createdOn' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('createdOn');\r",
                  "});\r",
                  "pm.test(\"Test event 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "});\r",
                  "pm.test(\"Test event 'location' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('location');\r",
                  "});\r",
                  "pm.test(\"Test event 'paid' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('paid');\r",
                  "});\r",
                  "pm.test(\"Test event 'participantLimit' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('participantLimit');\r",
                  "});\r",
                  "pm.test(\"Test event 'requestModeration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('requestModeration');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "});\r",
                  "pm.test(\"Test event 'views' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('views');\r",
                  "});\r",
                  "pm.test(\"Test event 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.not.have.property('mark');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Сплав на байдарках на полет.\",\r\n  \"category\": 2,\r\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2025-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Сплав на байдарках\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/users/1/events",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "1",
                "events"
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddEvent119byUser1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "});\r",
                  "pm.test(\"Test event 'annotation' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('annotation');\r",
                  "});\r",
                  "pm.test(\"Test event 'initiator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('initiator');\r",
                  "});\r",
                  "pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "pm.test(\"Test event 'category' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('category');\r",
                  "});\r",
                  "pm.test(\"Test event 'createdOn' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('createdOn');\r",
                  "});\r",
                  "pm.test(\"Test event 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "});\r",
                  "pm.test(\"Test event 'location' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('location');\r",
                  "});\r",
                  "pm.test(\"Test event 'paid' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('paid');\r",
                  "});\r",
                  "pm.test(\"Test event 'participantLimit' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('participantLimit');\r",
                  "});\r",
                  "pm.test(\"Test event 'requestModeration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('requestModeration');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "});\r",
                  "pm.test(\"Test event 'views' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('views');\r",
                  "});\r",
                  "pm.test(\"Test event 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.not.have.property('mark');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Сплав hhhhна похож на полет.\",\r\n  \"category\": 2,\r\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2025-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Сплав на байдарках\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/users/1/events",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "1",
                "events"
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddEvent116byUser1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "});\r",
                  "pm.test(\"Test event 'annotation' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('annotation');\r",
                  "});\r",
                  "pm.test(\"Test event 'initiator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('initiator');\r",
                  "});\r",
                  "pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "pm.test(\"Test event 'category' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('category');\r",
                  "});\r",
                  "pm.test(\"Test event 'createdOn' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('createdOn');\r",
                  "});\r",
                  "pm.test(\"Test event 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "});\r",
                  "pm.test(\"Test event 'location' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('location');\r",
                  "});\r",
                  "pm.test(\"Test event 'paid' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('paid');\r",
                  "});\r",
                  "pm.test(\"Test event 'participantLimit' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('participantLimit');\r",
                  "});\r",
                  "pm.test(\"Test event 'requestModeration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('requestModeration');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "});\r",
                  "pm.test(\"Test event 'views' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('views');\r",
                  "});\r",
                  "pm.test(\"Test event 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.not.have.property('mark');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Сплав на hhhhhh на полет.\",\r\n  \"category\": 1,\r\n  \"description\": \"Сплав на лодках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2025-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 5,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Сплав на лодках\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/users/1/events",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "1",
                "events"
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddEvent120byUser1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "});\r",
                  "pm.test(\"Test event 'annotation' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('annotation');\r",
                  "});\r",
                  "pm.test(\"Test event 'initiator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('initiator');\r",
                  "});\r",
                  "pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "pm.test(\"Test event 'category' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('category');\r",
                  "});\r",
                  "pm.test(\"Test event 'createdOn' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('createdOn');\r",
                  "});\r",
                  "pm.test(\"Test event 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "});\r",
                  "pm.test(\"Test event 'location' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('location');\r",
                  "});\r",
                  "pm.test(\"Test event 'paid' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('paid');\r",
                  "});\r",
                  "pm.test(\"Test event 'participantLimit' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('participantLimit');\r",
                  "});\r",
                  "pm.test(\"Test event 'requestModeration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('requestModeration');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "});\r",
                  "pm.test(\"Test event 'views' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('views');\r",
                  "});\r",
                  "pm.test(\"Test event 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.not.have.property('mark');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"похож на hhhhhhh полет.\",\r\n  \"category\": 1,\r\n  \"description\": \"Сплав на лодках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2025-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 5,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Сплав на лодках\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/users/1/events",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "1",
                "events"
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddEvent117byUser1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "});\r",
                  "pm.test(\"Test event 'annotation' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('annotation');\r",
                  "});\r",
                  "pm.test(\"Test event 'initiator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('initiator');\r",
                  "});\r",
                  "pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "pm.test(\"Test event 'category' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('category');\r",
                  "});\r",
                  "pm.test(\"Test event 'createdOn' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('createdOn');\r",
                  "});\r",
                  "pm.test(\"Test event 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "});\r",
                  "pm.test(\"Test event 'location' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('location');\r",
                  "});\r",
                  "pm.test(\"Test event 'paid' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('paid');\r",
                  "});\r",
                  "pm.test(\"Test event 'participantLimit' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('participantLimit');\r",
                  "});\r",
                  "pm.test(\"Test event 'requestModeration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('requestModeration');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "});\r",
                  "pm.test(\"Test event 'views' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('views');\r",
                  "});\r",
                  "pm.test(\"Test event 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.not.have.property('mark');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Сплав на hhhhhhh лодках \",\r\n  \"category\": 1,\r\n  \"description\": \"Сплав на лодках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2025-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 5,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Сплав на лодках\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/users/1/events",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "1",
                "events"
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddEvent113byUser1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "});\r",
                  "pm.test(\"Test event 'annotation' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('annotation');\r",
                  "});\r",
                  "pm.test(\"Test event 'initiator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('initiator');\r",
                  "});\r",
                  "pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "pm.test(\"Test event 'category' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('category');\r",
                  "});\r",
                  "pm.test(\"Test event 'createdOn' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('createdOn');\r",
                  "});\r",
                  "pm.test(\"Test event 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "});\r",
                  "pm.test(\"Test event 'location' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('location');\r",
                  "});\r",
                  "pm.test(\"Test event 'paid' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('paid');\r",
                  "});\r",
                  "pm.test(\"Test event 'participantLimit' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('participantLimit');\r",
                  "});\r",
                  "pm.test(\"Test event 'requestModeration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('requestModeration');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "});\r",
                  "pm.test(\"Test event 'views' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('views');\r",
                  "});\r",
                  "pm.test(\"Test event 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.not.have.property('mark');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Сплав на плотах похож на полет.\",\r\n  \"category\": 1,\r\n  \"description\": \"Сплав на плотах похож на полет. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2025-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 5,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Сплав на плотах\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/users/1/events",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "1",
                "events"
              ]
            }
          },
          "response": []
        },
        {
          "name": "PublishEvent116",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 116').to.eql(116);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "});\r",
                  "pm.test(\"Test event 'annotation' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('annotation');\r",
                  "});\r",
                  "pm.test(\"Test event 'initiator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('initiator');\r",
                  "});\r",
                  "pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "pm.test(\"Test event 'category' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('category');\r",
                  "});\r",
                  "pm.test(\"Test event 'createdOn' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('createdOn');\r",
                  "});\r",
                  "pm.test(\"Test event 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "});\r",
                  "pm.test(\"Test event 'location' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('location');\r",
                  "});\r",
                  "pm.test(\"Test event 'paid' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('paid');\r",
                  "});\r",
                  "pm.test(\"Test event 'participantLimit' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('participantLimit');\r",
                  "});\r",
                  "pm.test(\"Test event 'requestModeration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('requestModeration');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "    pm.expect(jsonData.state).to.eql('PUBLISHED');\r",
                  "});\r",
                  "pm.test(\"Test event 'views' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('views');\r",
                  "});\r",
                  "pm.test(\"Test event 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.not.have.property('mark');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/admin/events/116",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "admin",
                "events",
                "116"
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddEvent114byUser1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "});\r",
                  "pm.test(\"Test event 'annotation' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('annotation');\r",
                  "});\r",
                  "pm.test(\"Test event 'initiator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('initiator');\r",
                  "});\r",
                  "pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "pm.test(\"Test event 'category' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('category');\r",
                  "});\r",
                  "pm.test(\"Test event 'createdOn' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('createdOn');\r",
                  "});\r",
                  "pm.test(\"Test event 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "});\r",
                  "pm.test(\"Test event 'location' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('location');\r",
                  "});\r",
                  "pm.test(\"Test event 'paid' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('paid');\r",
                  "});\r",
                  "pm.test(\"Test event 'participantLimit' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('participantLimit');\r",
                  "});\r",
                  "pm.test(\"Test event 'requestModeration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('requestModeration');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "});\r",
                  "pm.test(\"Test event 'views' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('views');\r",
                  "});\r",
                  "pm.test(\"Test event 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.not.have.property('mark');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Сплав на плотах похож на полет.\",\r\n  \"category\": 1,\r\n  \"description\": \" На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2025-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 5,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Сплав на плотах\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/users/1/events",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "1",
                "events"
              ]
            }
          },
          "response": []
        },
        {
          "name": "PublishEvent117",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 117').to.eql(117);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "});\r",
                  "pm.test(\"Test event 'annotation' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('annotation');\r",
                  "});\r",
                  "pm.test(\"Test event 'initiator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('initiator');\r",
                  "});\r",
                  "pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "pm.test(\"Test event 'category' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('category');\r",
                  "});\r",
                  "pm.test(\"Test event 'createdOn' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('createdOn');\r",
                  "});\r",
                  "pm.test(\"Test event 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "});\r",
                  "pm.test(\"Test event 'location' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('location');\r",
                  "});\r",
                  "pm.test(\"Test event 'paid' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('paid');\r",
                  "});\r",
                  "pm.test(\"Test event 'participantLimit' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('participantLimit');\r",
                  "});\r",
                  "pm.test(\"Test event 'requestModeration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('requestModeration');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "    pm.expect(jsonData.state).to.eql('PUBLISHED');\r",
                  "});\r",
                  "pm.test(\"Test event 'views' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('views');\r",
                  "});\r",
                  "pm.test(\"Test event 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.not.have.property('mark');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/admin/events/117",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "admin",
                "events",
                "117"
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddEvent115byUser1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "});\r",
                  "pm.test(\"Test event 'annotation' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('annotation');\r",
                  "});\r",
                  "pm.test(\"Test event 'initiator' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('initiator');\r",
                  "});\r",
                  "pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "pm.test(\"Test event 'category' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('category');\r",
                  "});\r",
                  "pm.test(\"Test event 'createdOn' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('createdOn');\r",
                  "});\r",
                  "pm.test(\"Test event 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "});\r",
                  "pm.test(\"Test event 'location' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('location');\r",
                  "});\r",
                  "pm.test(\"Test event 'paid' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('paid');\r",
                  "});\r",
                  "pm.test(\"Test event 'participantLimit' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('participantLimit');\r",
                  "});\r",
                  "pm.test(\"Test event 'requestModeration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('requestModeration');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "});\r",
                  "pm.test(\"Test event 'views' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('views');\r",
                  "});\r",
                  "pm.test(\"Test event 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.not.have.property('mark');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Сплав на плотах похож на полет.\",\r\n  \"category\": 1,\r\n  \"description\": \"Сплав на плотах похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. \",\r\n  \"eventDate\": \"2025-12-31 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 5,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Сплав на плотах\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/users/1/events",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "1",
                "events"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Requests",
      "item": [
        {
          "name": "AddRequesrUser2Event116",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/2/requests?eventId=116",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "requests"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "116"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddRequesrUser3Event116",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/3/requests?eventId=116",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "3",
                "requests"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "116"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddRequesrUser3Event117",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/3/requests?eventId=117",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "3",
                "requests"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "117"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddRequesrUser4Event117 Copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/4/requests?eventId=117",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "4",
                "requests"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "117"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Marks",
      "item": [
        {
          "name": "AddMarkUser2Event116",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has mark create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test mark 'userId' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('userId');\r",
                  "    pm.expect(jsonData.userId, '\"userId\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test mark 'eventId' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventId');\r",
                  "    pm.expect(jsonData.eventId, '\"eventId\" must be 116').to.eql(116);\r",
                  "});\r",
                  "pm.test(\"Test mark 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mark');\r",
                  "    pm.expect(jsonData.mark, '\"mark\" must be 5').to.eql(5);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/2/events/116/like?mark=5",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "events",
                "116",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddErrorMarkUser2Event116 Duplicate",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 409\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([409]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/2/events/116/like?mark=5",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "events",
                "116",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddErrorMarkUser999Event1 WrongUser",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/999/events/1/like?mark=5",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "999",
                "events",
                "1",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddErrorMarkUser2Event99 WrongEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/2/events/999/like?mark=5",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "events",
                "999",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddErrorMarkUser2Event1 Mark<0",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([400]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/2/events/1/like?mark=-5",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "events",
                "1",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "-5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddErrorMarkUser2Event1 Mark=0",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([400]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/2/events/1/like?mark=0",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "events",
                "1",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "0"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddErrorMarkUser2Event1 Mark>5",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([400]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/2/events/1/like?mark=6",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "events",
                "1",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "6"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddErrorMarkUser1Event1 MarkByAuthor",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 409\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([409]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/1/events/116/like?mark=5",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "1",
                "events",
                "116",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddErrorMarkUser4Event1 MarkByUserWithoutRequest",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 409\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([409]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/4/events/116/like?mark=5",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "4",
                "events",
                "116",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddErrorMarkUser2Event3 MarkEventNotPublished",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 409\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([409]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/2/events/118/like?mark=5",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "events",
                "118",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddMarkUser3Event116",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has mark create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test mark 'userId' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('userId');\r",
                  "    pm.expect(jsonData.userId, '\"userId\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test mark 'eventId' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventId');\r",
                  "    pm.expect(jsonData.eventId, '\"eventId\" must be 116').to.eql(116);\r",
                  "});\r",
                  "pm.test(\"Test mark 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mark');\r",
                  "    pm.expect(jsonData.mark, '\"mark\" must be 1').to.eql(1);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/3/events/116/like?mark=1",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "3",
                "events",
                "116",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetEvent116WithMark",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 116').to.eql(116);\r",
                  "});\r",
                  "pm.test(\"Test event 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mark');\r",
                  "    pm.expect(jsonData.mark, '\"mark\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test event 'UserMark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.initiator).to.have.property('mark');\r",
                  "    pm.expect(jsonData.initiator.mark, '\"mark\" must be 3').to.eql(3);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/events/116",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "events",
                "116"
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddMarkUser4Event117",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has mark create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test mark 'userId' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('userId');\r",
                  "    pm.expect(jsonData.userId, '\"userId\" must be 4').to.eql(4);\r",
                  "});\r",
                  "pm.test(\"Test mark 'eventId' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventId');\r",
                  "    pm.expect(jsonData.eventId, '\"eventId\" must be 117').to.eql(117);\r",
                  "});\r",
                  "pm.test(\"Test mark 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mark');\r",
                  "    pm.expect(jsonData.mark, '\"mark\" must be 5').to.eql(5);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/4/events/117/like?mark=5",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "4",
                "events",
                "117",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddMarkUser3Event117",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has mark create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test mark 'userId' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('userId');\r",
                  "    pm.expect(jsonData.userId, '\"userId\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test mark 'eventId' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventId');\r",
                  "    pm.expect(jsonData.eventId, '\"eventId\" must be 117').to.eql(117);\r",
                  "});\r",
                  "pm.test(\"Test mark 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mark');\r",
                  "    pm.expect(jsonData.mark, '\"mark\" must be 5').to.eql(5);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/3/events/117/like?mark=5",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "3",
                "events",
                "117",
                "like"
              ],
              "query": [
                {
                  "key": "mark",
                  "value": "5"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetPublicEventsWithMarksByViews",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test event[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 116').to.eql(116);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('mark');\r",
                  "    pm.expect(jsonData[0].mark, '\"mark\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'UserMark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0].initiator).to.have.property('mark');\r",
                  "    pm.expect(jsonData[0].initiator.mark, '\"mark\" must be 4').to.eql(4);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test event[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 117').to.eql(117);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('mark');\r",
                  "    pm.expect(jsonData[1].mark, '\"mark\" must be 5').to.eql(5);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'UserMark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1].initiator).to.have.property('mark');\r",
                  "    pm.expect(jsonData[1].initiator.mark, '\"mark\" must be 4').to.eql(4);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/events?rangeStart=2025-12-31%2015%3A00%3A00&rangeEnd=2025-12-31%2015%3A30%3A00&onlyAvailable=false&sort=VIEWS&from=0&size=15",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "events"
              ],
              "query": [
                {
                  "key": "rangeStart",
                  "value": "2025-12-31%2015%3A00%3A00"
                },
                {
                  "key": "rangeEnd",
                  "value": "2025-12-31%2015%3A30%3A00"
                },
                {
                  "key": "onlyAvailable",
                  "value": "false"
                },
                {
                  "key": "sort",
                  "value": "VIEWS"
                },
                {
                  "key": "from",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "15"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetPublicEventsWithMarksByMarks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test event[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 117').to.eql(117);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('mark');\r",
                  "    pm.expect(jsonData[0].mark, '\"mark\" must be 5').to.eql(5);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'UserMark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0].initiator).to.have.property('mark');\r",
                  "    pm.expect(jsonData[0].initiator.mark, '\"mark\" must be 4').to.eql(4);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test event[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 116').to.eql(116);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('mark');\r",
                  "    pm.expect(jsonData[1].mark, '\"mark\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'UserMark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1].initiator).to.have.property('mark');\r",
                  "    pm.expect(jsonData[1].initiator.mark, '\"mark\" must be 4').to.eql(4);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/events?rangeStart=2025-12-31%2015%3A00%3A00&rangeEnd=2025-12-31%2015%3A30%3A00&onlyAvailable=false&from=0&size=15",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "events"
              ],
              "query": [
                {
                  "key": "rangeStart",
                  "value": "2025-12-31%2015%3A00%3A00"
                },
                {
                  "key": "rangeEnd",
                  "value": "2025-12-31%2015%3A30%3A00"
                },
                {
                  "key": "onlyAvailable",
                  "value": "false"
                },
                {
                  "key": "from",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "15"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetAdminEventsWithMarks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test event[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 117').to.eql(117);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('mark');\r",
                  "    pm.expect(jsonData[0].mark, '\"mark\" must be 5').to.eql(5);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'UserMark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0].initiator).to.have.property('mark');\r",
                  "    pm.expect(jsonData[0].initiator.mark, '\"mark\" must be 4').to.eql(4);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test event[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 116').to.eql(116);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('mark');\r",
                  "    pm.expect(jsonData[1].mark, '\"mark\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'UserMark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1].initiator).to.have.property('mark');\r",
                  "    pm.expect(jsonData[1].initiator.mark, '\"mark\" must be 4').to.eql(4);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/admin/events?rangeStart=2025-12-31%2015%3A00%3A00&rangeEnd=2025-12-31%2015%3A30%3A00&from=0&size=50",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "admin",
                "events"
              ],
              "query": [
                {
                  "key": "rangeStart",
                  "value": "2025-12-31%2015%3A00%3A00"
                },
                {
                  "key": "rangeEnd",
                  "value": "2025-12-31%2015%3A30%3A00"
                },
                {
                  "key": "from",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "50"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "DeleteMarkUser2Event116",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/2/events/116/like",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "events",
                "116",
                "like"
              ]
            }
          },
          "response": []
        },
        {
          "name": "DeleteErrorMarkUser4Event116 NoMarkFromUser",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/4/events/116/like",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "4",
                "events",
                "116",
                "like"
              ]
            }
          },
          "response": []
        },
        {
          "name": "DeleteErrorMarkUser999Event1 WrongUser",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/999/events/1/like",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "999",
                "events",
                "1",
                "like"
              ]
            }
          },
          "response": []
        },
        {
          "name": "DeleteErrorMarkUser2Event999 WrongEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/2/events/999/like",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "2",
                "events",
                "999",
                "like"
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetPublicEvent116WithMark AfterDelete",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 116').to.eql(116);\r",
                  "});\r",
                  "pm.test(\"Test event 'mark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mark');\r",
                  "    pm.expect(jsonData.mark, '\"mark\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test event 'UserMark' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.initiator).to.have.property('mark');\r",
                  "    pm.expect(jsonData.initiator.mark, '\"mark\" must be 3.7').to.eql(3.7);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/events/116",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "events",
                "116"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ]
}